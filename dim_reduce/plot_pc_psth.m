function handle = plot_pc_psth(psth,state,varargin)

    % plot psths of pcs (pcs generated by get_pc_psth).
    % set plotdim to 1, 2 or 3 for plotstyle (1=time v. pcs,
    % 2=plot(pc1,pc2), 3 = plot(pc1,pc2,pc3);
    % set pcs to choose which pcs to plot
    % set time_lim_s to define time range.
    
    % new psth has to be generated to pick different trial ids.

    %% parse and validate inputs
    kPETH = get_PETH_params();        
    p=inputParser;
    p.addRequired('psth',@(x)validateattributes(x,{'struct'},{}));
    p.addRequired('state',@(x)validateattributes(x,{'char'},{'nonempty'}));
    p.addParameter('plotdim',1,@(x)validateattributes(x,{'numeric'},{'scalar'}));
    p.addParameter('pcs',1:numel(psth),@(x)validateattributes(x,{'numeric'},{'vector','nonempty','positive','<=',numel(psth)}));
    p.addParameter('time_lim_s',kPETH.timeLimS.(state),@(x)validateattributes(x,{'numeric'},{'vector','numel',2,'increasing'}));
    p.addParameter('view',[160 10],@(x)validateattributes(x,{'numeric'},{'vector','numel',2})); % azimuth and elevation for 3d plots    
    p.addParameter('baseline',[]);
    p.parse(psth,state,varargin{:});
    params = p.Results;
    if ~isfield(psth,state)
        error('psth missing field for state: %s.',state);
    end
    
    %% get data and times
    times = kPETH.timeS.(state);
    good_idx = times>=params.time_lim_s(1) & times<=params.time_lim_s(2);
    times=times(good_idx);
    vals = cat(1,psth.(state))';
    vals = vals(good_idx,params.pcs);
    
    if ~isempty(params.baseline)
        baseline_vals = cat(1,params.baseline.(state))';
        baseline_vals = baseline_vals(good_idx,params.pcs);
        vals = vals - baseline_vals;
    end
    

    %% plot
    switch params.plotdim
        case 1
            handle=plot(times,vals);
            legend(handle,string(params.pcs));
            xlabel(sprintf('time (s) after %s',state));
            ylabel('a.u.');
        case 2
            if numel(params.pcs)<2
                error('for plotdim=2, you must select at least 2 pcs.');
            end
            handle=plot(vals(:,1),vals(:,2));
            xlabel(sprintf('PC %g',params.pcs(1)));
            ylabel(sprintf('PC %g',params.pcs(2)));
        case 3
            if numel(params.pcs)<3
                error('for plotdim=3, you must select at least 3 pcs.');
            end
            handle = plot3(vals(:,1),vals(:,2),vals(:,3));
            xlabel(sprintf('PC %g',params.pcs(1)));
            ylabel(sprintf('PC %g',params.pcs(2)));         
            zlabel(sprintf('PC %g',params.pcs(3)));       
            view(params.view);
    end
end